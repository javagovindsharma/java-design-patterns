package com.govind.service;

import java.io.File;
import java.io.FileInputStream;
import java.util.Iterator;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.log4j.Logger;
import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.extractor.WordExtractor;
import org.apache.poi.hwpf.model.StyleDescription;
import org.apache.poi.hwpf.usermodel.CharacterRun;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.IRunElement;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTR;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTShd;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * DOC to XML converter service
 * 
 * @author govind.sharma
 *
 */

public class DocToXmlConverter {

	static final Logger logger = Logger.getLogger(DocToXmlConverter.class);

	DocumentBuilderFactory docFactory = null;
	DocumentBuilder docBuilder = null;
	Element rootElement = null;
	Document docxml = null;
	boolean subHeaders = false, liTagFlag = false;
	Element UrlElement = null;

	/**
	 * @param path
	 * @param fileName
	 */
	@SuppressWarnings("deprecation")
	public void processDocxToXml(String path, String fileName) {

		XWPFDocument xdoc = null;
		FileInputStream fis = null;
		String tabStr = "";
		List<XWPFTable> listatab = null;
		String fullPath = path + "/" + fileName + ".docx";

		try {
			// Read file
			fis = new FileInputStream(fullPath);
			xdoc = new XWPFDocument(OPCPackage.open(fis));

			initializeXml();
			// get Document Body Paragraph content

			Iterator<IBodyElement> iter = xdoc.getBodyElementsIterator();
			while (iter.hasNext()) {

				String styleName = null, paraText = "", bulletsPoints = null, textColour = null, bgcolor = null;
				boolean paragraphcIsBold = false;

				IBodyElement elem = iter.next();
				if (elem instanceof XWPFParagraph) {
					styleName = ((XWPFParagraph) elem).getStyle();
					paraText = ((XWPFParagraph) elem).getParagraphText();
					bulletsPoints = ((XWPFParagraph) elem).getNumFmt();
					List<XWPFRun> runerList = ((XWPFParagraph) elem).getRuns();

					for (XWPFRun run : runerList) {
						if (textColour == null)
							textColour = run.getColor();

						try {
							CTR ctr = run.getCTR();
							if (ctr.isSetRPr()) {
								CTShd shds = ctr.getRPr().getShd();
								if (shds.isSetFill())
									bgcolor = shds.xgetFill().stringValue();
							}

							logger.info("run.text(" + run.text());

						} catch (Exception e) {
						}

					}

				} else if (elem instanceof XWPFTable) {
					
					listatab=elem.getBody().getTables();
					
				}

				createXmlTags(styleName, paraText, bulletsPoints, paragraphcIsBold, textColour, bgcolor, listatab);

				if(listatab!=null) {
					listatab=null;
				}
				
			}

			/*
			 * List<XWPFParagraph> paragraphList = xdoc.getParagraphs(); for (XWPFParagraph
			 * paragraph : paragraphList) {
			 * 
			 * String styleName = paragraph.getStyle(); String paraText =
			 * paragraph.getParagraphText(); String bulletsPoints = paragraph.getNumFmt();
			 * boolean paragraphcIsBold = false; String textColour = null; String bgcolor =
			 * null;
			 * 
			 * // read Tabular Formatted content
			 * 
			 * XWPFDocument locDocx = (XWPFDocument) paragraph.getPart();
			 * 
			 * if (locDocx.getTables() != null) { listatab = locDocx.getTables();
			 * 
			 * if (tabStr.contains(locDocx.getTables().toString()) && listatab!=null ) {
			 * listatab=null; }else { tabStr = locDocx.getTables().toString(); }
			 * 
			 * }
			 * 
			 * logger.info("tables" + paraText); for (XWPFRun run : paragraph.getRuns()) {
			 * if (textColour == null) textColour = run.getColor();
			 * 
			 * try { CTR ctr = run.getCTR(); if (ctr.isSetRPr()) { CTShd shds =
			 * ctr.getRPr().getShd(); if (shds.isSetFill()) bgcolor =
			 * shds.xgetFill().stringValue(); }
			 * 
			 * logger.info("run.text(" + run.text());
			 * 
			 * } catch (Exception e) { }
			 * 
			 * }
			 * 
			 * createXmlTags(styleName, paraText, bulletsPoints, paragraphcIsBold,
			 * textColour, bgcolor, listatab);
			 * 
			 * }
			 */
			// write the content into XML file
			generateXml(path, fileName);
			logger.info("Doc to Xml Convertion completed.");

		} catch (Exception ex) {
			logger.error("Exception while generating XML from DOC" + ex.getMessage());
			ex.printStackTrace();
			System.exit(0);
		}
	}

	/**
	 * @param path
	 * @param fileName
	 */
	public void processDocToXml(String path, String fileName) {
		HWPFDocument doc = null;
		List<XWPFTable> listatab = null;
		String fullPath = path + "/" + fileName + ".doc";

		WordExtractor we = null;
		try {
			POIFSFileSystem fis = new POIFSFileSystem(new FileInputStream(fullPath));
			doc = new HWPFDocument(fis);

		} catch (Exception e) {
			logger.error("Unable to Read File..." + e.getMessage());
			System.exit(0);
		}
		try {
			we = new WordExtractor(doc);
			Range range = doc.getRange();

			initializeXml();

			String[] paragraphs = we.getParagraphText();

			for (int i = 0; i < paragraphs.length; i++) {
				org.apache.poi.hwpf.usermodel.Paragraph pr = range.getParagraph(i);

				int j = 0;
				while (true) {
					CharacterRun run = pr.getCharacterRun(j++);

					StyleDescription style = doc.getStyleSheet().getStyleDescription(run.getStyleIndex());
					String styleName = style.getName();
					String paraText = run.text();
					String bulletsPoints = null;
					int textColour = run.getColor();
					String bgcolor = String.valueOf(pr.getShading().getCvFore().getValue());

					boolean paragraphcIsBold = run.isBold();

				//	createXmlTags(styleName, paraText, bulletsPoints, paragraphcIsBold, String.valueOf(textColour),bgcolor, listatab);

					if (run.getEndOffset() == pr.getEndOffset()) {
						break;
					}
				}
			}

			generateXml(path, fileName);

			logger.info("Document to Xml Convertion completed.");
		} catch (Exception ex) {
			logger.error("Exception while generating XML from DOC" + ex.getMessage());
			System.exit(0);
		}
	}

	/**
	 * 
	 */
	private void initializeXml() {

		// initialize XML Document
		try {
			docFactory = DocumentBuilderFactory.newInstance();
			docBuilder = docFactory.newDocumentBuilder();
			docxml = docBuilder.newDocument();

			rootElement = docxml.createElement("BENEFIT");
			docxml.appendChild(rootElement);
		} catch (ParserConfigurationException e) {
			logger.error("Exception while initializing XML" + e.getMessage());
		}

	}

	/**
	 * @param styleName
	 * @param paragraphText
	 * @param bulletsPoints
	 */
	private void createXmlTags(String styleName, String paragraphText, String bulletsPoints, boolean paragraphcIsBold,String textColour, String bgcolor, List<XWPFTable> listatab) {
//	private void createXmlTags(String styleName, String paragraphText, String bulletsPoints, boolean paragraphcIsBold,String textColour, String bgcolor, List<XWPFTableRow> listatab) {

		// create XML Tags

		if (styleName != null && paragraphText.length() > 1) {

			if (styleName != null && bulletsPoints != null) {

				if (liTagFlag) {
					Element pragElement = docxml.createElement("LI");
					pragElement.appendChild(docxml.createTextNode(paragraphText));
					UrlElement.appendChild(pragElement);
					subHeaders = false;
				} else {

					UrlElement = docxml.createElement("UL");
					rootElement.appendChild(UrlElement);
					subHeaders = false;

					Element pragElement = docxml.createElement("LI");
					pragElement.appendChild(docxml.createTextNode(paragraphText));
					UrlElement.appendChild(pragElement);

					liTagFlag = true;
					subHeaders = false;
				}

			} else if (paragraphcIsBold) {

				logger.info("bold valu---->> " + paragraphText);
				Element pragElement = docxml.createElement("B");
				pragElement.appendChild(docxml.createTextNode(paragraphText));

				if (textColour != null && textColour != null && textColour.length() > 3 && textColour.length() > 3)
					pragElement.setAttribute("colour", textColour);

				if (bgcolor != null && bgcolor != null && bgcolor.length() > 3)
					pragElement.setAttribute("bgcolour", bgcolor);

				rootElement.appendChild(pragElement);
				subHeaders = true;
			} else if (styleName.equalsIgnoreCase("Style4")) {
				Element pragElement = docxml.createElement("TITLE");
				pragElement.appendChild(docxml.createTextNode(paragraphText.trim()));
				rootElement.appendChild(pragElement);
				subHeaders = true;
			} else if (styleName.equalsIgnoreCase("Default")) {
				Element pragElement = docxml.createElement("P");
				pragElement.appendChild(docxml.createTextNode(paragraphText));

				if (textColour != null && textColour != null && textColour.length() > 3)
					pragElement.setAttribute("colour", textColour);

				if (bgcolor != null && bgcolor != null && bgcolor.length() > 3)
					pragElement.setAttribute("bgcolour", bgcolor);

				rootElement.appendChild(pragElement);
				subHeaders = true;
			} else if (styleName.equalsIgnoreCase("Normal")) {
				Element pragElement = docxml.createElement("P");
				pragElement.appendChild(docxml.createTextNode(paragraphText));

				if (textColour != null && textColour != null && textColour.length() > 3)
					pragElement.setAttribute("colour", textColour);

				if (bgcolor != null && bgcolor != null && bgcolor.length() > 3)
					pragElement.setAttribute("bgcolour", bgcolor);

				rootElement.appendChild(pragElement);
				subHeaders = true;
			} else if (styleName.equalsIgnoreCase("BodyCopy")) {
				Element pragElement = docxml.createElement("PS");
				pragElement.appendChild(docxml.createTextNode(paragraphText));

				if (textColour != null && textColour != null && textColour.length() > 3)
					pragElement.setAttribute("colour", textColour);

				if (bgcolor != null && bgcolor != null && bgcolor.length() > 3)
					pragElement.setAttribute("bgcolour", bgcolor);

				rootElement.appendChild(pragElement);
				subHeaders = true;
			} else if (styleName.equalsIgnoreCase("ListParagraph")) {
				Element pragElement = docxml.createElement("LI");
				pragElement.appendChild(docxml.createTextNode(paragraphText));

				if (textColour != null && textColour != null && textColour.length() > 3)
					pragElement.setAttribute("colour", textColour);

				if (bgcolor != null && bgcolor != null && bgcolor.length() > 3)
					pragElement.setAttribute("bgcolour", bgcolor);

				UrlElement.appendChild(pragElement);
				subHeaders = false;
			} else if (styleName.equalsIgnoreCase("Subheader1")) {
				UrlElement = docxml.createElement("UL");
				UrlElement.appendChild(docxml.createTextNode(paragraphText));

				rootElement.appendChild(UrlElement);
				subHeaders = false;

			} else {
				Element pragElement = docxml.createElement("PS");
				pragElement.appendChild(docxml.createTextNode(paragraphText));

				if (textColour != null && textColour != null && textColour.length() > 3)
					pragElement.setAttribute("colour", textColour);

				if (bgcolor != null && bgcolor != null && bgcolor.length() > 3)
					pragElement.setAttribute("bgcolour", bgcolor);

				rootElement.appendChild(pragElement);
				subHeaders = true;
			}

		} else if (paragraphText.trim().length() > 1) {
			Element pragElement = docxml.createElement("P");
			pragElement.appendChild(docxml.createTextNode(paragraphText));

			if (textColour != null && textColour != null && textColour.length() > 3)
				pragElement.setAttribute("colour", textColour);

			if (bgcolor != null && bgcolor != null && bgcolor.length() > 3)
				pragElement.setAttribute("bgcolour", bgcolor);

			rootElement.appendChild(pragElement);
			subHeaders = true;
		} else if (listatab != null) {

			Element pragElement = docxml.createElement("TAB");
			rootElement.appendChild(pragElement);
			subHeaders = false;

			for (XWPFTable tabs : listatab) {
				List<XWPFTableRow> rowes = tabs.getRows();

				for (XWPFTableRow row : rowes) {

					Element trElement = docxml.createElement("TR");
					pragElement.appendChild(trElement);
					List<XWPFTableCell> tabCell = row.getTableCells();
					for (XWPFTableCell cell : tabCell) {
						List<XWPFParagraph> listabPara = cell.getParagraphs();
						for (XWPFParagraph tabpara : listabPara) {
							List<XWPFRun> lruner = tabpara.getRuns();
							for (XWPFRun runner : lruner) {
								if (runner.isBold()) {
									Element tdElement = docxml.createElement("TH");
									tdElement.appendChild(docxml.createTextNode(runner.text()));
									trElement.appendChild(tdElement);
								} else {
									Element tdElement = docxml.createElement("TD");
									tdElement.appendChild(docxml.createTextNode(runner.text()));
									trElement.appendChild(tdElement);
								}

							}
						}

					}
				}

			}
		}

		if (subHeaders) {
			Element pragElement = docxml.createElement("NEWLINE");
			pragElement.appendChild(docxml.createTextNode(""));
			rootElement.appendChild(pragElement);
		}
	}

	/**
	 * @param path
	 * @param fileName
	 */
	private void generateXml(String path, String fileName) {
		try {
			// write the content into xml file
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.METHOD, "xml");
			transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
			transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");

			DOMSource source = new DOMSource(docxml);

			StreamResult result = new StreamResult(new File(path + "/" + fileName + ".xml"));
			transformer.transform(source, result);
		} catch (Exception e) {
			logger.error("Exception while generating XML" + e.getMessage());
		}
	}

}
